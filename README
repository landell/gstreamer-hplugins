Copyright 2008 Samuel R. C. Vale <srcvale@holoscopio.com>

This software was based on V4L2 Documentation, and luvcview (Copyright
2005 2006 2007 Laurent Pinchart, Michel Xhaard, and 2006 Gabriel A.
Devenyi).

V4l2capture is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

V4l2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with v4l2capture.  If not, see <http://www.gnu.org/licenses/>.


1. Intro

V4l2capture is a simple console software to take images from cameras
supported by a v4l2 compliant driver. It provide a simple interface and
flexible parammeters to well suit on shell scripts.

V4l2 capture was mostly tested with UVC cameras. By now, v4l2capture
support only devices that provide MJPEG/JPEG streams.


2. Credits

v4l2capture author - Samuel R. C. Vale <srcvale@holoscopio.com>

v4l2capture was based on V4l2 documentation, and some parts of luvcview
(Copyright 2005 2006 2007 Laurent Pinchart, Michel, Xhaard, and 2006
Gabriel A. Devenyi).


3. Building

To build v4l2capture:

$> make


4. Running

Running with parameters, v4l2capture will try take a 320x240 image from
/dev/video0, with timeout of 1000ms and can try 3 times, saving it as
"image.jpg".

-r resolution - image resolution, on format "WxH";
-o output_prefix - the name of output file, without extension;
-d device name - path to v4l2 device;
-t timeout per frame - time to wait for a frame, in miliseconds;
-e number of retries - number of tries to take a non-empty or
non-corrupted image;
-h - help sumary;

5. Issues

For now, v4l2capture was tested only with uvc devices that support MJPEG
streamming.

Some USB devices switches their own modes depending on USB speed. So, a
USB 2.0 camera that don't support MJPEG maybe can do it if plugged on a
USB 1.1 host or if the ehci linux module has been removed (rmmod
ehci-hcd).

--
